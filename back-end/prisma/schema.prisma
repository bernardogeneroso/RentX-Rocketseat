// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Users {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String             @db.VarChar
  email            String             @unique @db.VarChar
  password         String             @db.VarChar
  avatar           String?            @db.VarChar
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  usersTokens      UsersTokens[]
  carsAppointments CarsAppointments[]
}

model UsersTokens {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token      String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       Users    @relation(fields: [user_id], references: [id])
}

model Cars {
  plate            String             @id @db.VarChar
  carDetailId      String             @db.Uuid
  brand            String             @db.VarChar
  model            String             @unique @db.VarChar
  colour           String             @db.VarChar
  fuel             FuelRoles          @default(gasoline)
  transmission     TransmissionRoles  @default(auto)
  pricePerDay      Int                @db.Integer
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  carDetail        CarsDetails        @relation(fields: [carDetailId], references: [id])
  carsAppointments CarsAppointments[]
  carsImages       CarsImages[]
}

model CarsImages {
  id    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  carId String @db.VarChar
  url   String @db.VarChar
  car   Cars   @relation(fields: [carId], references: [plate])
}

model CarsDetails {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  maxSpeed   Int      @db.Integer
  topSpeed   Float    @db.DoublePrecision
  hp         Int      @db.Integer
  people     Int      @db.Integer
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  car        Cars?
}

model CarsAppointments {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  carId      String    @db.VarChar
  userId     String    @db.Uuid
  start_in   DateTime?
  end_in     DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  car        Cars      @relation(fields: [carId], references: [plate])
  user       Users     @relation(fields: [userId], references: [id])
}

enum FuelRoles {
  gasoline
  electric
  alcohol
}

enum TransmissionRoles {
  auto
  manual
}
